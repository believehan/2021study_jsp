/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.50
 * Generated at: 2021-09-27 02:42:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import board.BoardBean;
import java.util.*;

public final class list_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("board.BoardBean");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      board.BoardMgr bMgr = null;
      bMgr = (board.BoardMgr) _jspx_page_context.getAttribute("bMgr", javax.servlet.jsp.PageContext.PAGE_SCOPE);
      if (bMgr == null){
        bMgr = new board.BoardMgr();
        _jspx_page_context.setAttribute("bMgr", bMgr, javax.servlet.jsp.PageContext.PAGE_SCOPE);
      }
      out.write('\r');
      out.write('\n');

	request.setCharacterEncoding("EUC-KR");
	int totalRecord = 0;    // 전체 레코드수
	int numPerPage = 5;    // 1페이지당 보여주는 레코드 수
	int pagePerBlock = 5;   // 1블럭당 보여주는 페이지 수
	
	int totalPage = 0;      // 전체 페이지 수 prve...[1][2][3].....
	int totalBlock = 0;     // 전체 블록수
	
	int nowPage = 1;       	// 현재 해당되는 페이지
	int nowBlock =1;		// 현재 해당되는 블록
	
	int start = 0;			// DB에서 select의 시작번호(한페이지에 필요한 만큼 게시물을 가져오려고)
	int listSize = 0;		// 현재 읽어온 게시물의 수
	
	Vector<BoardBean> vlist = null;
	String keyWord = "", keyField = "";
	if(request.getParameter("keyWord") != null) {
		keyWord = request.getParameter("keyWord");
		keyField = request.getParameter("keyField");
	}
	if(request.getParameter("reload") != null) {
		if(request.getParameter("reload").equals("true")){
			keyWord = "";
			keyField = "";
		}
	}
	if(request.getParameter("nowPage") != null){
		nowPage = Integer.parseInt(request.getParameter("nowPage"));
	}
	start = (nowPage * numPerPage)-numPerPage;
	totalRecord = bMgr.getTotalCount(keyField, keyWord);  //전체 레코드 수
	totalPage = (int)Math.ceil((double)totalRecord / numPerPage); // 전체 페이지수
	nowBlock = (int)Math.ceil((double)nowPage / pagePerBlock);  // 현재 속해있는 블록
	totalBlock = (int)Math.ceil((double)totalPage / pagePerBlock); // 전체블록수

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"EUC-KR\">\r\n");
      out.write("<title>JSP Board</title>\r\n");
      out.write("<style>\r\n");
      out.write("	a:link {text-decoration:none; color:#696969}\r\n");
      out.write("	a:hover {text-decoration:yes; color:#66ccff}\r\n");
      out.write("	a:visited {text-decoration:none; color:#330066}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	function list() {\r\n");
      out.write("		document.listFrm.action = \"list.jsp\";\r\n");
      out.write("		document.listFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("	function check() {\r\n");
      out.write("		if(document.searchFrm.keyWord.value == \"\") {\r\n");
      out.write("			alert(\"검색어를 입력하세요\");\r\n");
      out.write("			document.searchFrm.keyWord.focus();\r\n");
      out.write("			return;\r\n");
      out.write("		}\r\n");
      out.write("		document.searchFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("	function read(num) {\r\n");
      out.write("		document.readFrm.num.value = num;\r\n");
      out.write("		document.readFrm.action = \"read.jsp\";\r\n");
      out.write("		document.readFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("	function block(value) {\r\n");
      out.write("		document.readFrm.nowPage.value = ");
      out.print(pagePerBlock);
      out.write("*(value-1) + 1;\r\n");
      out.write("		document.readFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("	function pageing(page) {\r\n");
      out.write("		document.readFrm.nowPage.value = page;\r\n");
      out.write("		document.readFrm.submit();\r\n");
      out.write("	}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h2 align=\"center\">JSPBoard</h2><p/>\r\n");
      out.write("	<table align =\"center\" width=\"600\">\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\">Total : ");
      out.print(totalRecord );
      out.write("Articles(<font color=\"red\">");
      out.print(nowPage );
      out.write('/');
      out.print(totalPage );
      out.write("</font>Page)</td>\r\n");
      out.write("		</tr>		\r\n");
      out.write("		<tr bgcolor=\"#d0d0d0\" align=\"center\">\r\n");
      out.write("			<th width=\"10%\">번호</th>\r\n");
      out.write("			<th width=\"45%\">제목</th>\r\n");
      out.write("			<th width=\"15%\">이름</th>\r\n");
      out.write("			<th width=\"18%\">날짜</th>\r\n");
      out.write("			<th width=\"12%\">조회수</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

			vlist =bMgr.getBoardList(keyField, keyWord, start, numPerPage);
			listSize = vlist.size();
			if(vlist.isEmpty()) {
				out.print("<tr><td colspan='5'>등록된 게시물이 없습니다</td></tr>");
			} else {
				for(int i=0; i<numPerPage; i++) {
					if(i==listSize)
						break;
					BoardBean bean = vlist.get(i);
					int num = bean.getNum();
					String name = bean.getName();
					String subject = bean.getSubject();
					String regdate = bean.getRegdate();
					int count = bean.getCount();
					int depth = bean.getDepth();
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td align=\"center\">");
      out.print(totalRecord-((nowPage-1)*numPerPage)-i );
      out.write("</td>\r\n");
      out.write("			<td>\r\n");
      out.write("			");

				if(depth > 0) {
					for(int j=0; j<depth; j++) {
						out.print("&emsp;");
					}
				}
			
      out.write("\r\n");
      out.write("			<a href=\"javascript:read('");
      out.print(num );
      out.write("')\">");
      out.print(subject );
      out.write("</a>\r\n");
      out.write("			</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(name );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(regdate );
      out.write("</td>\r\n");
      out.write("			<td align=\"center\">");
      out.print(count );
      out.write("</td>\r\n");
      out.write("		</tr>			\r\n");
      out.write("		");

				} // for end
			}		//if else end
		
      out.write("\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td colspan=\"5\"><br/><br/></td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<!-- 페이징 처리 시작 --> \r\n");
      out.write("			<td colspan=\"3\">\r\n");
      out.write("				");

					int pageStart = (nowBlock-1) * pagePerBlock + 1;  // 블럭의 시작 페이지 번호 계산
					int pageEnd = (pageStart + pagePerBlock <= totalPage) ? (pageStart + pagePerBlock) : totalPage +1;
					if(totalPage != 0){
						if(nowBlock > 1) {
				
      out.write("\r\n");
      out.write("							<a href=\"javascript:block('");
      out.print(nowBlock-1 );
      out.write("')\">prev...</a>\r\n");
      out.write("				");

						}
						out.print("&nbsp;");
						for(; pageStart<pageEnd; pageStart++) {
				
      out.write("\r\n");
      out.write("							<a href=\"javascript:pageing('");
      out.print(pageStart );
      out.write("')\">\r\n");
      out.write("							");

								if(pageStart==nowPage) {
      out.write("\r\n");
      out.write("									<font color = \"blue\">\r\n");
      out.write("							");
 } 
      out.write("				\r\n");
      out.write("								[");
      out.print(pageStart );
      out.write("]\r\n");
      out.write("							");

								if(pageStart==nowPage) {
      out.write("\r\n");
      out.write("									</font>\r\n");
      out.write("							");
 } 
      out.write("			\r\n");
      out.write("							</a>\r\n");
      out.write("				");

						} // for end
						out.print("&nbsp;");
						if(totalBlock > nowBlock) { 
      out.write("\r\n");
      out.write("							<a herf=\"javascript:block('");
      out.print(nowBlock+1 );
      out.write("')\">...next</a>\r\n");
      out.write("						");
}
					}
				
      out.write("\r\n");
      out.write("			</td>\r\n");
      out.write("			<!-- 페이징 처리 끝 -->\r\n");
      out.write("			<td colspan=\"2\" align=\"right\">\r\n");
      out.write("				<a href = \"post.jsp\">[글쓰기]</a>&nbsp;\r\n");
      out.write("				<a href = \"javascript:list()\">[처음으로]</a> \r\n");
      out.write("			</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("	</table>\r\n");
      out.write("	<hr width=\"600\"/>\r\n");
      out.write("	<form name=\"searchFrm\" method=\"get\" action=\"list.jsp\">\r\n");
      out.write("		<table align=\"center\" width=\"600\">\r\n");
      out.write("			<tr>\r\n");
      out.write("				<td align=\"center\">\r\n");
      out.write("					<select name=\"keyField\">\r\n");
      out.write("						<option value=\"name\">이름</option>\r\n");
      out.write("						<option value=\"subject\">제목</option>\r\n");
      out.write("						<option value=\"content\">내용</option>\r\n");
      out.write("					</select>\r\n");
      out.write("					<input name=\"keyWord\">\r\n");
      out.write("					<input type=\"button\" value=\"찾기\" onClick=\"javascript:check()\">\r\n");
      out.write("					<input type=\"hidden\" name=\"nowPage\" value=\"1\">\r\n");
      out.write("				</td>\r\n");
      out.write("			</tr>\r\n");
      out.write("		</table>\r\n");
      out.write("	</form>\r\n");
      out.write("	<form name=\"listFrm\" method=\"post\">\r\n");
      out.write("		<input type=\"hidden\" name=\"reload\" vaule=\"true\">\r\n");
      out.write("		<input type=\"hidden\" name = \"nowPage\" value=\"1\">\r\n");
      out.write("	</form>\r\n");
      out.write("	<form name=\"readFrm\" method=\"get\">\r\n");
      out.write("		<input type=\"hidden\" name=\"num\">\r\n");
      out.write("		<input type=\"hidden\" name=\"nowPage\" value=\"");
      out.print(nowPage );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"keyField\" value=\"");
      out.print(keyField );
      out.write("\">\r\n");
      out.write("		<input type=\"hidden\" name=\"keyWord\" value=\"");
      out.print(keyWord );
      out.write("\">\r\n");
      out.write("	</form>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
